<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://oppkey.github.io/fastopp/feed.xml" rel="self" type="application/atom+xml" /><link href="https://oppkey.github.io/fastopp/" rel="alternate" type="text/html" /><updated>2025-10-28T14:47:18+00:00</updated><id>https://oppkey.github.io/fastopp/feed.xml</id><title type="html">FastOpp Blog</title><subtitle>Easier AI Web Apps for Students - FastAPI starter package for students prototyping AI web applications</subtitle><author><name>Oppkey</name></author><entry><title type="html">Why I Replaced pip, Black, Flake8, and isort with Two Modern Python Tools (2026)</title><link href="https://oppkey.github.io/fastopp/2025/10/27/python-development-environment/" rel="alternate" type="text/html" title="Why I Replaced pip, Black, Flake8, and isort with Two Modern Python Tools (2026)" /><published>2025-10-27T00:00:00+00:00</published><updated>2025-10-27T00:00:00+00:00</updated><id>https://oppkey.github.io/fastopp/2025/10/27/python-development-environment</id><content type="html" xml:base="https://oppkey.github.io/fastopp/2025/10/27/python-development-environment/"><![CDATA[<p>The Python community is changing faster today than at any
point in the last 20 years. To keep pace with the changes in Python, developers
need to change their Python tool use.</p>

<h2 id="comparison-of-python-development-tools">Comparison of Python Development Tools</h2>

<p>I dumped pip, pylance, flake8, isort and Black formatter and
configured my Python tools for a fun-filled future in 2026 with
ruff, uv, and Anysphere Python.</p>

<table>
  <thead>
    <tr>
      <th>Old Tool</th>
      <th>Purpose</th>
      <th>Replacement</th>
      <th>Why</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>pip</strong></td>
      <td>Dependency management</td>
      <td><strong>uv</strong></td>
      <td>Instant installs, modern environment manager</td>
    </tr>
    <tr>
      <td><strong>Black</strong></td>
      <td>Code formatting</td>
      <td><strong>Ruff Formatter</strong></td>
      <td>Black-compatible, Rust-fast</td>
    </tr>
    <tr>
      <td><strong>Flake8</strong></td>
      <td>Linting</td>
      <td><strong>Ruff</strong></td>
      <td>100× faster, auto-fixes, one binary</td>
    </tr>
    <tr>
      <td><strong>isort</strong></td>
      <td>Import sorting</td>
      <td><strong>Ruff (built-in)</strong></td>
      <td>Same behavior, no extra tool</td>
    </tr>
    <tr>
      <td><strong>Pylance</strong></td>
      <td>Language server for VS Code</td>
      <td><strong>Anysphere Python</strong></td>
      <td>Faster, AI-integrated, built into Cursor</td>
    </tr>
  </tbody>
</table>

<p><strong>Note:</strong> I’m creating this Python workflow while working on <a href="https://github.com/Oppkey/fastopp">FastOpp</a>,
a FastAPI starter for students building AI web applications. If you want to practice these
modern Python tools yourself, FastOpp is built with uv and ruff from the ground up.</p>

<p>For the past year, I knew my editor configuration was not optimal.
I just ignored digging into
the setup despite Cursor’s annoying message to
use Anysphere Python instead of the proven and stable Pylance language server.
It was more fun to write Python code than to edit the configuration files
for Python tools. Additionally, a quick assessment months ago, showed me
that Pylance was better than Anysphere Python.</p>

<p>I like the Cursor editor and plan to stick with it in 2026. Since Cursor is committed
to Anysphere Python, I decided
to give it a try. Once I opened the <code class="language-plaintext highlighter-rouge">settings.json</code> file, I realized that
there were a lot more improvements that could make my life more fun.</p>

<h2 id="pip-versus-uv">pip versus uv</h2>

<p>pip (and later <code class="language-plaintext highlighter-rouge">pipenv</code> or <code class="language-plaintext highlighter-rouge">poetry</code>) used to manage my dependencies.
They worked, but installation speed and dependency resolution were slow — especially in large projects.</p>

<p>uv, from Astral (the team behind Ruff), replaces pip and virtualenv entirely.
It’s a single Rust binary that can:</p>

<ul>
  <li>create virtual environments instantly,</li>
  <li>install packages in parallel,</li>
  <li>resolve dependencies deterministically,</li>
  <li>manage Python versions transparently,</li>
  <li>publish packages to PyPI with <code class="language-plaintext highlighter-rouge">uv build</code> and <code class="language-plaintext highlighter-rouge">uv publish</code>,</li>
  <li>and manage different Python versions with <code class="language-plaintext highlighter-rouge">uv install --python &lt;version&gt;</code> and works well with pyenv,</li>
</ul>

<p>Typical workflow:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv init myproject
uv add fastapi
uv run fastapi dev
</code></pre></div></div>

<p>It’s drop-in compatible with pip but 10 to 100× faster.</p>

<p>One major advantage of uv is its native support for <code class="language-plaintext highlighter-rouge">pyproject.toml</code>, Python’s modern standard for project configuration.
Unlike pip, which primarily uses separate <code class="language-plaintext highlighter-rouge">requirements.txt</code> files for dependency management (leading to inconsistent setups across projects), uv encourages using <code class="language-plaintext highlighter-rouge">pyproject.toml</code> for everything:
dependency management, build configuration, and tool settings.
This single file approach provides consistency across projects and makes configuration management much simpler.</p>

<h2 id="python-black-formatter-versus-ruff-formatter">Python Black Formatter versus Ruff Formatter</h2>

<p>Black was my code formatter — it enforced consistent indentation, spacing, and line length.
Ruff now includes a Black-compatible formatter built in:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruff format <span class="nb">.</span>
</code></pre></div></div>

<p>It’s fully compatible with Black’s style (the “one true way” of formatting Python) but runs instantly, thanks to Rust.</p>

<p>I removed the Black formatter extension in Cursor and set Ruff as my default formatter in <code class="language-plaintext highlighter-rouge">settings.json</code>.</p>

<h2 id="optimzing-a-pyprojecttoml-template-for-ruff">Optimzing a <code class="language-plaintext highlighter-rouge">pyproject.toml</code> Template for ruff</h2>

<p>I’ve created a reusable <code class="language-plaintext highlighter-rouge">pyproject.toml</code> that preloads my Ruff configuration.
Since uv doesn’t yet have a template command, I copy this file manually into new projects.
It defines:</p>

<ul>
  <li>line length</li>
  <li>rule families (<code class="language-plaintext highlighter-rouge">E</code>, <code class="language-plaintext highlighter-rouge">F</code>, <code class="language-plaintext highlighter-rouge">I</code>, <code class="language-plaintext highlighter-rouge">B</code>, <code class="language-plaintext highlighter-rouge">UP</code>, <code class="language-plaintext highlighter-rouge">SIM</code>, <code class="language-plaintext highlighter-rouge">C4</code>)</li>
  <li>formatting and import-sorting behavior</li>
</ul>

<p>Example snippet:</p>

<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[tool.ruff]</span>
<span class="py">line-length</span> <span class="p">=</span> <span class="mi">120</span>
<span class="py">select</span> <span class="p">=</span> <span class="p">[</span><span class="s">"E"</span><span class="p">,</span> <span class="s">"F"</span><span class="p">,</span> <span class="s">"I"</span><span class="p">,</span> <span class="s">"B"</span><span class="p">,</span> <span class="s">"UP"</span><span class="p">,</span> <span class="s">"SIM"</span><span class="p">,</span> <span class="s">"C4"</span><span class="p">]</span>

<span class="nn">[tool.ruff.format]</span>
<span class="py">quote-style</span> <span class="p">=</span> <span class="s">"double"</span>
<span class="py">indent-style</span> <span class="p">=</span> <span class="s">"space"</span>
</code></pre></div></div>

<p>Then I just run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv <span class="nb">sync</span> <span class="nt">--dev</span>
ruff check <span class="nb">.</span> <span class="nt">--fix</span>
ruff format <span class="nb">.</span>
</code></pre></div></div>

<p>This is my full <code class="language-plaintext highlighter-rouge">pyproject.toml</code> template.</p>

<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[project]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"your_project"</span>
<span class="py">version</span> <span class="p">=</span> <span class="s">"0.1.0"</span>
<span class="py">description</span> <span class="p">=</span> <span class="s">"Modern uv + Ruff Python project"</span>
<span class="py">readme</span> <span class="p">=</span> <span class="s">"README.md"</span>
<span class="py">requires-python</span> <span class="p">=</span> <span class="py">"&gt;</span><span class="p">=</span><span class="mf">3.11</span><span class="s">"</span><span class="err">
</span><span class="py">dependencies</span> <span class="p">=</span> <span class="p">[]</span>

<span class="nn">[project.optional-dependencies]</span>
<span class="py">dev</span> <span class="p">=</span> <span class="nn">["ruff"]</span>

<span class="nn">[tool.ruff]</span>
<span class="py">line-length</span> <span class="p">=</span> <span class="mi">120</span>
<span class="py">target-version</span> <span class="p">=</span> <span class="s">"py311"</span>
<span class="py">select</span> <span class="p">=</span> <span class="p">[</span><span class="s">"E"</span><span class="p">,</span> <span class="s">"F"</span><span class="p">,</span> <span class="s">"I"</span><span class="p">,</span> <span class="s">"B"</span><span class="p">,</span> <span class="s">"UP"</span><span class="p">,</span> <span class="s">"SIM"</span><span class="p">,</span> <span class="s">"C4"</span><span class="p">]</span>
<span class="py">fix</span> <span class="p">=</span> <span class="kc">true</span>

<span class="nn">[tool.ruff.format]</span>
<span class="py">quote-style</span> <span class="p">=</span> <span class="s">"double"</span>
<span class="py">indent-style</span> <span class="p">=</span> <span class="s">"space"</span>
<span class="py">line-ending</span> <span class="p">=</span> <span class="s">"lf"</span>
<span class="py">skip-magic-trailing-comma</span> <span class="p">=</span> <span class="kc">false</span>

<span class="nn">[tool.ruff.isort]</span>
<span class="py">combine-as-imports</span> <span class="p">=</span> <span class="kc">true</span>
<span class="py">force-sort-within-sections</span> <span class="p">=</span> <span class="kc">true</span>
</code></pre></div></div>

<p>I keep the file in <code class="language-plaintext highlighter-rouge">/Users/craig/.config/uv/templates/ruff/pyproject.toml</code>.</p>

<p>To use it, I do:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv init my_project
<span class="nb">cd </span>my_project
<span class="nb">cp</span> ~/.config/uv/templates/ruff/pyproject.toml <span class="nb">.</span>
</code></pre></div></div>

<p>Hopefully, uv will add the ability to start a new project with a template in future.</p>

<h2 id="flake8-versus-ruff">Flake8 versus Ruff</h2>

<p>Flake8 was my linter for over a decade. It’s great.
It runs static checks (E, F, W codes) to catch style issues, undefined variables, and logical mistakes.
Flake8 can be extended with plugins like <code class="language-plaintext highlighter-rouge">flake8-bugbear</code>, <code class="language-plaintext highlighter-rouge">flake8-comprehensions</code>, and <code class="language-plaintext highlighter-rouge">flake8-docstrings</code>.</p>

<p>The downside?</p>

<ul>
  <li>Dozens of small Python plugins to install</li>
  <li>Slow runtime on large projects</li>
  <li>No auto-fix</li>
</ul>

<p>Ruff, written in Rust, replaces all of that in one binary.
It implements nearly all Flake8 plugins natively — <code class="language-plaintext highlighter-rouge">B</code> for bugbear, <code class="language-plaintext highlighter-rouge">C4</code> for comprehensions, <code class="language-plaintext highlighter-rouge">UP</code> for pyupgrade, and more.
It’s 100× faster and can fix issues automatically:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruff check <span class="nb">.</span> <span class="nt">--fix</span>
</code></pre></div></div>

<p>I uninstalled Flake8 and now rely entirely on Ruff for linting. Similar to leaving Pylance,
it’s a bit sad to move off old tools. However, I’m excited to really focus on the new tools
and learn more about the capability of ruff over time.</p>

<h2 id="from-isort-to-ruffs-built-in-import-sorter">From isort to Ruff’s built-in import sorter</h2>

<p>isort automatically groups and alphabetizes imports:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># before
</span><span class="kn">import</span> <span class="nn">sys</span><span class="p">,</span> <span class="n">os</span>
<span class="kn">from</span> <span class="nn">requests</span> <span class="kn">import</span> <span class="n">get</span>
</code></pre></div></div>

<p>to</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># after
</span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="kn">from</span> <span class="nn">requests</span> <span class="kn">import</span> <span class="n">get</span>
</code></pre></div></div>

<p>Ruff re-implements isort’s logic internally — same rules, same grouping, same configuration style.
By enabling Ruff’s <code class="language-plaintext highlighter-rouge">"I"</code> rule family (and <code class="language-plaintext highlighter-rouge">[tool.ruff.isort]</code> in <code class="language-plaintext highlighter-rouge">pyproject.toml</code>), imports are fixed automatically during linting:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruff check <span class="nb">.</span> <span class="nt">--fix</span>
</code></pre></div></div>

<p>That means no need for a separate <code class="language-plaintext highlighter-rouge">isort</code> install or pre-commit hook. I uninstalled the
<a href="https://marketplace.visualstudio.com/items?itemName=ms-python.isort">isort VSCode extension</a>.</p>

<h2 id="pylance-versus-anysphere-python">Pylance versus Anysphere Python</h2>

<p>Pylance is Microsoft’s language server for Python — the component that powers IntelliSense in VS Code.
It provides:</p>

<ul>
  <li>autocompletion,</li>
  <li>type inference,</li>
  <li>inline documentation,</li>
  <li>“go to definition” navigation,</li>
  <li>and static type checking (via Pyright under the hood).</li>
</ul>

<p>Although Pylance is superior to Anysphere Python, I switched to Anysphere Python and
replaced Pylance as the language server.
In actual use, the advantages of Anysphere Python over Pylance are not immediately obvious. However, I’m
hoping it will get better in 2026. I made the switch at the end of 2025 because Anysphere Python
may have better context-aware code generating and editing in the future.
As I’ve started to use the Cursor Plan mode, I’m hoping that Anysphere Python
will help. In Cursor, I uninstalled the <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance">Pylance extension</a>.</p>

<p>Switching from Pylance to Anysphere Python is the most controversial change I made.
Dumping pip, flake8, isort, and Black formatter are not as controversial because uv and
ruff are superior to the older tools.</p>

<h2 id="improving-cursor-settingsjson-for-python-in-2026">Improving Cursor <code class="language-plaintext highlighter-rouge">settings.json</code> for Python in 2026</h2>

<p>Finally, I updated my editor configuration (settings.json) to remove old formatters and linters and point to Ruff as the default Python formatter.</p>

<p>I’ll include those specific settings in the blog itself, but here’s the key line:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"[python]"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"editor.defaultFormatter"</span><span class="p">:</span><span class="w"> </span><span class="s2">"charliermarsh.ruff"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"editor.formatOnSave"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>In the View -&gt; Command Palette, search for
<em>Preferences: Open User Settings (JSON)</em>.</p>

<p><img src="/fastopp/assets/images/2025_10/user_settings.webp" alt="User Settings" /></p>

<p>Here is my full <code class="language-plaintext highlighter-rouge">settings.json</code> file:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"git.autofetch"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"git.enableSmartCommit"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"git.confirmSync"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">

  </span><span class="nl">"[dart]"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"editor.formatOnSave"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"editor.formatOnType"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"editor.rulers"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="mi">80</span><span class="p">],</span><span class="w">
    </span><span class="nl">"editor.selectionHighlight"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nl">"editor.suggest.snippetsPreventQuickSuggestions"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nl">"editor.suggestSelection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"first"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"editor.tabCompletion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"onlySnippets"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"editor.wordBasedSuggestions"</span><span class="p">:</span><span class="w"> </span><span class="s2">"off"</span><span class="w">
  </span><span class="p">},</span><span class="w">

  </span><span class="nl">"workbench.startupEditor"</span><span class="p">:</span><span class="w"> </span><span class="s2">"none"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"editor.minimap.enabled"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
  </span><span class="nl">"window.zoomLevel"</span><span class="p">:</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w">
  </span><span class="nl">"editor.fontFamily"</span><span class="p">:</span><span class="w"> </span><span class="s2">"'Fira Code', 'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"editor.fontSize"</span><span class="p">:</span><span class="w"> </span><span class="mi">20</span><span class="p">,</span><span class="w">

  </span><span class="nl">"editor.defaultFormatter"</span><span class="p">:</span><span class="w"> </span><span class="s2">"esbenp.prettier-vscode"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"editor.formatOnSave"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"editor.inlineSuggest.enabled"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"editor.inlineSuggest.suppressSuggestions"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
  </span><span class="nl">"editor.suggest.showInlineDetails"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
  </span><span class="nl">"editor.quickSuggestionsDelay"</span><span class="p">:</span><span class="w"> </span><span class="mi">500</span><span class="p">,</span><span class="w">
  </span><span class="nl">"editor.accessibilitySupport"</span><span class="p">:</span><span class="w"> </span><span class="s2">"off"</span><span class="p">,</span><span class="w">

  </span><span class="nl">"[python]"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"editor.defaultFormatter"</span><span class="p">:</span><span class="w"> </span><span class="s2">"charliermarsh.ruff"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"editor.formatOnType"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"editor.formatOnSave"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">},</span><span class="w">

  </span><span class="nl">"prettier.disableLanguages"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"python"</span><span class="p">],</span><span class="w">

  </span><span class="nl">"[html]"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"editor.defaultFormatter"</span><span class="p">:</span><span class="w"> </span><span class="s2">"esbenp.prettier-vscode"</span><span class="w"> </span><span class="p">},</span><span class="w">
  </span><span class="nl">"[json]"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"editor.defaultFormatter"</span><span class="p">:</span><span class="w"> </span><span class="s2">"esbenp.prettier-vscode"</span><span class="w"> </span><span class="p">},</span><span class="w">
  </span><span class="nl">"[javascript]"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"editor.defaultFormatter"</span><span class="p">:</span><span class="w"> </span><span class="s2">"esbenp.prettier-vscode"</span><span class="w"> </span><span class="p">},</span><span class="w">
  </span><span class="nl">"[javascriptreact]"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"editor.defaultFormatter"</span><span class="p">:</span><span class="w"> </span><span class="s2">"esbenp.prettier-vscode"</span><span class="w"> </span><span class="p">},</span><span class="w">
  </span><span class="nl">"[typescriptreact]"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"editor.defaultFormatter"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vscode.typescript-language-features"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"[css]"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"editor.defaultFormatter"</span><span class="p">:</span><span class="w"> </span><span class="s2">"esbenp.prettier-vscode"</span><span class="w"> </span><span class="p">},</span><span class="w">

  </span><span class="nl">"security.workspace.trust.untrustedFiles"</span><span class="p">:</span><span class="w"> </span><span class="s2">"open"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"remote.autoForwardPortsSource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"hybrid"</span><span class="p">,</span><span class="w">

  </span><span class="nl">"dart.previewFlutterUiGuides"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"dart.previewFlutterUiGuidesCustomTracking"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"dartImport.fixOnSave"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"dartImport.showErrorMessages"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
  </span><span class="nl">"dartImport.showInfoMessages"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
  </span><span class="nl">"dart.flutterHotReloadOnSave"</span><span class="p">:</span><span class="w"> </span><span class="s2">"manualIfDirty"</span><span class="p">,</span><span class="w">

  </span><span class="nl">"emmet.includeLanguages"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"django-html"</span><span class="p">:</span><span class="w"> </span><span class="s2">"html"</span><span class="w"> </span><span class="p">},</span><span class="w">

  </span><span class="nl">"ruff.args"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"--line-length=120"</span><span class="p">,</span><span class="w"> </span><span class="s2">"--ignore=I001"</span><span class="p">],</span><span class="w">
  </span><span class="nl">"ruff.enable"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"ruff.nativeServer"</span><span class="p">:</span><span class="w"> </span><span class="s2">"on"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"ruff.organizeImports"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"ruff.fixAll"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"ruff.exclude"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"venv"</span><span class="p">,</span><span class="w"> </span><span class="s2">"__pycache__"</span><span class="p">,</span><span class="w"> </span><span class="s2">"migrations"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>I am still using the prettier formatter for other languages such as HTML,
JavaScript, CSS, Markdown. I’m only using
ruff as the formatter for Python. Additionally, I have old Dart settings
that I need to review and potentially improve. I intend to use
Dart with Flutter to build frontend examples for FastOpp.</p>

<h2 id="result">Result</h2>

<p>After switching:</p>

<ul>
  <li>No more managing 4+ Python tools</li>
  <li>No redundant dependencies</li>
  <li>Instant linting, formatting, and import cleanup</li>
  <li>uv replaces pip + venv, faster and cleaner</li>
  <li>Cursor’s AI works directly with my Python environment (via Anysphere)</li>
</ul>

<p>Everything just feels faster — from creating projects to saving files.</p>

<h2 id="try-this-setup-with-fastopp">Try this setup with FastOpp</h2>

<p>FastOpp is perfect for learning modern Python development patterns.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/Oppkey/fastopp.git
<span class="nb">cd </span>fastopp
uv <span class="nb">sync</span>
</code></pre></div></div>

<p>The tooling and flow was built and tested with FastOpp.</p>

<h3 id="reflection">Reflection</h3>

<p>The Python ecosystem has evolved dramatically — the new Rust-based tooling from Astral (Ruff, uv) makes Python development feel fast. I saw an interview of one of the
founders of Anysphere, the makers of Cursor. He said that
they wanted to make development fun and that fast was fun.
I agree with this. Speed and the quest for efficiency
are really powerful ways to make life more fun.
Additionally, I removed almost a dozen Python-only dependencies and simplified my workflow to just Ruff + uv.</p>

<p>Dig into your editor settings and make Python development as fun as possible.
You’ll be on track to make 2026 your most exciting
year of Python development in decades.</p>]]></content><author><name>Craig Oda</name></author><category term="python," /><category term="uv," /><category term="ruff," /><category term="development-environment," /><category term="fastapi," /><category term="fastopp," /><category term="modern-tools," /><category term="linting," /><category term="formatting" /><summary type="html"><![CDATA[Discover how modern Rust-based tools (uv and ruff) can make Python development faster. Learn the migration path from pip to uv and from Black/Flake8 to ruff, plus optimal Cursor/VS Code settings.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://oppkey.github.io/fastopp/assets/images/2025_10/red-maple.webp" /><media:content medium="image" url="https://oppkey.github.io/fastopp/assets/images/2025_10/red-maple.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Python Development with Asynchronous SQLite and PostgreSQL</title><link href="https://oppkey.github.io/fastopp/2025/10/14/sqlite-to-postgresql/" rel="alternate" type="text/html" title="Python Development with Asynchronous SQLite and PostgreSQL" /><published>2025-10-14T00:00:00+00:00</published><updated>2025-10-14T00:00:00+00:00</updated><id>https://oppkey.github.io/fastopp/2025/10/14/sqlite-to-postgresql</id><content type="html" xml:base="https://oppkey.github.io/fastopp/2025/10/14/sqlite-to-postgresql/"><![CDATA[<p>An updated version of this article is <a href="https://dzone.com/articles/python-async-sqlite-postgresql-development">available on DZone</a>.</p>

<p>After years of working from the comfort of Python and Django,
I moved to the wild asynchronous world of FastAPI to improve
latency in web-based AI applications. I started with FastAPI
and built an open source stack called <a href="https://github.com/Oppkey/fastopp">FastOpp</a> which adds command line and web tools similar to Django.</p>

<p>Initially, things with smoothly using SQLite and
<a href="https://github.com/omnilib/aiosqlite">aiosqlite</a> to add
AsyncIO to SQLite. I used <a href="https://www.sqlalchemy.org/">SQLAlchemy</a> as my Object Relational
Mapper (ORM) and Alembic as the database migration tool. Everything
seemed to work easily, so I added a Python script to make things
similar to Django’s <code class="language-plaintext highlighter-rouge">migrate.py</code>.</p>

<p>As things were going smoothly, I added <a href="https://docs.pydantic.dev/latest/">Pydantic</a> for data validation and
connected Pydantic to the SQLAlchemy models with <a href="https://sqlmodel.tiangolo.com/">SQLModel</a>.
Although I was pulling in open source packages that I wasn’t that familiar with, the packages
were popular and I didn’t have problems during initial use.</p>

<p>Django comes with an opinated stack of stable, time-tested tools, which I was
started to miss. However, in order to give
FastAPI a proper assessment, I continued forward by integrating
<a href="https://github.com/aminalaee/sqladmin">SQLAdmin</a>
for a pre-configured web admin panel for SQLAlchemy.</p>

<p>I also implemented <a href="https://github.com/fastapi-users/fastapi-users">FastAPIUsers</a>.
At this point, I started to miss Django even more as I needed to implement my own
JWT authentication, using FastAPIUsers as the hash mechanism.
The FastAPI project has a <a href="https://github.com/fastapi/full-stack-fastapi-template">full-stack-fastapi-template</a>
that might have been a better starting point.</p>

<p>I chose not to use it since my primary goal was focused on using Jinja2
templates for a streaming application from an LLM. This would provide a more Django-like experience
for FastAPI and provide the opportunity in the future to use the built-in API and auto-documentation
of FastAPI instead of implementing something like Django REST framework.</p>

<p>The obvious question is whether it’s better to just use Django from the beginning and
not build a Django-like interface around FastAPI. The primary motivation occurred when I was using Django for asynchronous communication with LLM endpoints. Although Django works fine with
asynchronous communication, because its default communication style is synchronous,
it created a number of problems for me. For most average people like me, it’s going
to be difficult to keep a method asynchronous and not have any
synchronous calls in it to other libraries that might be synchronous or
other synchronous communication channels like a database access.</p>

<p>At this point, I had already committed to FastAPI and making things asynchronous.
I thought I just needed to use an asynchronous driver with PostgresSQL
and everything would work.</p>

<p>I was wrong.</p>

<h2 id="problems-moving-to-asynchronous-database-connections-psycopg2-psycopg3-or-asyncpg">Problems Moving to Asynchronous Database Connections psycopg2, psycopg3 or asyncpg</h2>

<p>The default way to connect to Python for many people is psycopg2.
This is a very proven way.  It is the default usage in most Django applications.
Unfortunately, it is synchronous. The most common asynchronous PostgresSQL connector is asyncpg.
Initially, I used psycopg2 and rewrote the database connection to be synchronous and 
have everything around the connection be asynchronous. 
As the latency with the LLM is much higher than the latency with the database,
this seemed like a reasonable solution at the time.  I just had to await
for the database to send me back the response and then I was free to deal
with other asynchronous problems such as LLM query and Internet search
status updates.</p>

<p>This is great in theory and I’m sure that other more experienced Python
developers can easily solve this problem and keep the synchronous and asynchronous
code nicely separated with clean use of async and await.</p>

<p>However, I ran into problems with organizing my code to be synchronous
connections to the database within asynchronous methods that were talking
to the LLM and storing the history in the database.</p>

<p>As I was familiar with async/await from using Dart for many years,
I was pretty surprised I was having these problems.  The problem
I had might have been due to my lack of experience understanding
which pre-made Python modules were sending back synchronous versus asynchronous responses.</p>

<p>I think that other Python developers might be able to understand my pain.</p>

<p>To keep to an asynchronous database connection for both SQLite and PostgresSQL,
I moved to asyncpg.</p>

<h2 id="ssl-security-not-needed-in-sqlite-but-needed-in-postgressql-production">SSL Security Not Needed in SQLite, But Needed in PostgresSQL Production</h2>

<p>The asyncpg connector worked fine in development but not in production.</p>

<p>Although establishing an SSL network connection seems obvious, I didn’t really appreciate this because
I had been deploying to sites like Fly.io, Railway and DigitalOcean Droplets with SQLite.
For small prototype applications, SQLite works surprisingly well with FastAPI.
I was trying to deploy to the free version, hobby tier, of Leapcell to set up a
tutorial for students who didn’t want to pay or didn’t want to put their
credit card into a hosting service.</p>

<p>There’s no way to write to the project file system on Leapcell.
They do offer a free tier that is pretty generous for PostgresSQL.
They require SSL communication between the PostgresSQL database and their engine,
which they call the service.</p>

<p>Unfortunately, the syntax is different for the SSL mode between psycopg2
and asyncpg.  I couldn’t just add sslmode=require to the end of the connection URL.</p>

<p>Leapcell did not have an example for asyncpg. Likely due to my limited skills, I wasn’t able to modify my application completely enough to put the SSL connections in all the required places.</p>

<p>In order to just use the URL connection point with sslmode=require, I decided
to use psycopg3.</p>

<h2 id="prepared-statements-caused-application-to-crash-with-sqlalchemy">Prepared Statements Caused Application to Crash With SQLAlchemy</h2>

<p>As I was trying to use an async ORM, I used SQLAlchemy. I
didn’t have too much experience with it initially. I didn’t realize that
even though I wasn’t making prepared statements in my Python application,
the communication process between psycopg and PostgresSQL was storing
prepared statements.</p>

<p>Due to the way the connections were pooled on Leapcell, I had to disable the
prepared statements.  It took me a while to isolate the problem and
then implement the fix.</p>

<p>The problem never occurred when using SQLite because SQLite runs prepared statements
in the same process using the same memory space as the Python program.
This is different from PostgreSQL where the network and session state can change.</p>

<p>As I was worried about the performance impact, I did some research and it does appear that
SQLAlchemy already does statement caching on the Python side.</p>

<p>The real world impact of disabling the prepared statement in PostgreSQL
appears to be negligible.</p>

<h2 id="summary">Summary</h2>

<p>Using SQLite in asynchronous mode has been quite easy.  Getting PostgresSQL to work has been more difficult.
There were three areas that I had trouble with for PostgresSQL:</p>

<ol>
  <li>Asynchronous connection. How write asynchronous Python code effectively to await the return data.</li>
  <li>Security. How to deal with both SQLite that doesn’t require a SSL and PostgresSQL in production that does require a SSL.</li>
  <li>Prepared statements. I needed to learn to rely on the SQLAlchemy statement caching instead of the built-in prepared statements on the PostgresSQL server.</li>
</ol>

<p>I like FastAPI and there are many huge advantages to using it that I got in the first hour of use.
I’m going to continue using it instead of Django.  However, I’m starting to really appreciate how much Django shielded me from much of the infrastructure setup for my applications.</p>

<p>FastAPI is unopinionated in things like the database, the connectors, authentication and models,
I find it difficult to gain expertise in any one area.  Thus, I am focusing on a smaller set of open source components that work with FastAPI so that I can gain a deeper understanding of how to use these components.</p>

<p>I feel that many other Python developers are on a similar journey to experiment more with asynchronous Python web applications.  I would appreciate feedback and ideas on which open source components or techniques to use to build effective asynchronous AI applications.</p>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="https://github.com/Oppkey/fastopp">FastOpp</a> - Open source stack I am building around FastAPI</li>
  <li><a href="https://fastapi.tiangolo.com/">FastAPI</a> - A better Flask</li>
</ul>]]></content><author><name>Craig Oda</name></author><summary type="html"><![CDATA[Solving SQL security, database connector, and prepared statement problems with Asynchronous PostgresSQL]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://oppkey.github.io/fastopp/assets/images/2025_10/time.jpg" /><media:content medium="image" url="https://oppkey.github.io/fastopp/assets/images/2025_10/time.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">File Upload Demo Now Runs on S3 in Addition to Local Files</title><link href="https://oppkey.github.io/fastopp/2025/10/09/modularize-storage-system/" rel="alternate" type="text/html" title="File Upload Demo Now Runs on S3 in Addition to Local Files" /><published>2025-10-09T00:00:00+00:00</published><updated>2025-10-09T00:00:00+00:00</updated><id>https://oppkey.github.io/fastopp/2025/10/09/modularize-storage-system</id><content type="html" xml:base="https://oppkey.github.io/fastopp/2025/10/09/modularize-storage-system/"><![CDATA[<h2 id="-overview">🎯 Overview</h2>

<p>FastOpp demo system moved to a modular storage system that abstracts file storage operations, supporting both local filesystem and S3-compatible object storage. The system is designed to work seamlessly in development (filesystem) and production (S3) environments, with automatic backend selection based on environment variables.</p>

<h2 id="-key-features">🚀 Key Features</h2>

<h3 id="modular-storage-architecture"><strong>Modular Storage Architecture</strong></h3>
<ul>
  <li><strong>Abstract Interface</strong>: Clean abstraction for storage operations</li>
  <li><strong>Multiple Backends</strong>: Filesystem and S3-compatible storage</li>
  <li><strong>Environment-Based Configuration</strong>: Automatic backend selection</li>
  <li><strong>Production-Ready</strong>: Supports LeapCell Object Storage and AWS S3</li>
</ul>

<h3 id="demo-assets-integration"><strong>Demo Assets Integration</strong></h3>
<ul>
  <li><strong>Save/Restore Support</strong>: Storage system included in demo workflow</li>
  <li><strong>Destroy/Restore Cycle</strong>: Storage system can be removed and restored</li>
  <li><strong>Change Detection</strong>: Storage system changes tracked in diff operations</li>
</ul>

<h2 id="-files-added">📁 Files Added</h2>

<h3 id="storage-system-core"><strong>Storage System Core</strong></h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">services/storage/__init__.py</code> - Module exports and imports</li>
  <li><code class="language-plaintext highlighter-rouge">services/storage/base.py</code> - Abstract storage interface</li>
  <li><code class="language-plaintext highlighter-rouge">services/storage/filesystem.py</code> - Filesystem storage implementation</li>
  <li><code class="language-plaintext highlighter-rouge">services/storage/s3.py</code> - S3-compatible storage implementation</li>
  <li><code class="language-plaintext highlighter-rouge">services/storage/factory.py</code> - Storage factory for backend selection</li>
  <li><code class="language-plaintext highlighter-rouge">services/storage/README.md</code> - Comprehensive documentation</li>
</ul>

<h2 id="-files-modified">🔄 Files Modified</h2>

<h3 id="core-application-files"><strong>Core Application Files</strong></h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">oppdemo.py</code> - Updated to use modular storage system
    <ul>
      <li><code class="language-plaintext highlighter-rouge">ensure_upload_dirs()</code> now uses storage abstraction</li>
      <li>Added storage system to save/restore/destroy workflow</li>
      <li>Added storage system to diff comparison</li>
    </ul>
  </li>
</ul>

<h3 id="scripts-updated"><strong>Scripts Updated</strong></h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">scripts/download_sample_photos.py</code> - Updated to use storage abstraction</li>
  <li><code class="language-plaintext highlighter-rouge">demo_scripts/download_sample_photos.py</code> - Updated to use storage abstraction</li>
</ul>

<h3 id="configuration"><strong>Configuration</strong></h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">example.env</code> - Added comprehensive storage configuration options
    <ul>
      <li>Storage type selection (<code class="language-plaintext highlighter-rouge">STORAGE_TYPE</code>)</li>
      <li>Filesystem storage options (<code class="language-plaintext highlighter-rouge">UPLOAD_DIR</code>)</li>
      <li>S3 storage options (access keys, bucket, endpoint, CDN)</li>
    </ul>
  </li>
</ul>

<h2 id="️-files-removed">🗑️ Files Removed</h2>

<h3 id="cleanup"><strong>Cleanup</strong></h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">storage/</code> (project root) - Redundant folder removed
    <ul>
      <li>Contained only <code class="language-plaintext highlighter-rouge">base.py</code> which was identical to <code class="language-plaintext highlighter-rouge">services/storage/base.py</code></li>
      <li>No code references to old location</li>
    </ul>
  </li>
</ul>

<h2 id="-technical-implementation">🔧 Technical Implementation</h2>

<h3 id="storage-interface"><strong>Storage Interface</strong></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">StorageInterface</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">ensure_directories</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">paths</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span>
    <span class="k">def</span> <span class="nf">save_file</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">content</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">content_type</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span>
    <span class="k">def</span> <span class="nf">get_file</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span>
    <span class="k">def</span> <span class="nf">file_exists</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span>
    <span class="k">def</span> <span class="nf">delete_file</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span>
    <span class="k">def</span> <span class="nf">list_files</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">prefix</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">""</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="k">def</span> <span class="nf">get_file_url</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span>
</code></pre></div></div>

<h3 id="backend-implementations"><strong>Backend Implementations</strong></h3>

<h4 id="filesystemstorage"><strong>FilesystemStorage</strong></h4>
<ul>
  <li>Local file storage for development</li>
  <li>Automatic directory creation</li>
  <li>Static file serving via FastAPI mounts</li>
  <li>URL generation for static file access</li>
</ul>

<h4 id="s3storage"><strong>S3Storage</strong></h4>
<ul>
  <li>S3-compatible object storage for production</li>
  <li>Supports AWS S3, LeapCell Object Storage, and other S3-compatible services</li>
  <li>CDN URL support for public file access</li>
  <li>Automatic content type detection</li>
</ul>

<h3 id="factory-pattern"><strong>Factory Pattern</strong></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_storage</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">StorageInterface</span><span class="p">:</span>
    <span class="n">storage_type</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">"STORAGE_TYPE"</span><span class="p">,</span> <span class="s">"filesystem"</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">storage_type</span> <span class="o">==</span> <span class="s">"s3"</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">_create_s3_storage</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">_create_filesystem_storage</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="-environment-configuration">🌍 Environment Configuration</h2>

<h3 id="development-default"><strong>Development (Default)</strong></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># No configuration needed - uses filesystem storage</span>
<span class="nv">STORAGE_TYPE</span><span class="o">=</span>filesystem
<span class="nv">UPLOAD_DIR</span><span class="o">=</span>static/uploads
</code></pre></div></div>

<h3 id="production-with-leapcell"><strong>Production with LeapCell</strong></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">STORAGE_TYPE</span><span class="o">=</span>s3
<span class="nv">S3_ACCESS_KEY</span><span class="o">=</span>your_leapcell_access_key
<span class="nv">S3_SECRET_KEY</span><span class="o">=</span>your_leapcell_secret_key
<span class="nv">S3_BUCKET</span><span class="o">=</span>your_bucket_name
<span class="nv">S3_ENDPOINT_URL</span><span class="o">=</span>https://objstorage.leapcell.io
<span class="nv">S3_CDN_URL</span><span class="o">=</span>https://your-account.leapcellobj.com/your-bucket
</code></pre></div></div>

<h3 id="production-with-aws-s3"><strong>Production with AWS S3</strong></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">STORAGE_TYPE</span><span class="o">=</span>s3
<span class="nv">S3_ACCESS_KEY</span><span class="o">=</span>your_aws_access_key
<span class="nv">S3_SECRET_KEY</span><span class="o">=</span>your_aws_secret_key
<span class="nv">S3_BUCKET</span><span class="o">=</span>your_bucket_name
<span class="nv">S3_REGION</span><span class="o">=</span>us-west-2
</code></pre></div></div>

<h2 id="-migration-guide">🔄 Migration Guide</h2>

<h3 id="from-hardcoded-paths"><strong>From Hardcoded Paths</strong></h3>
<p><strong>Before:</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">upload_dir</span> <span class="o">=</span> <span class="s">"static/uploads"</span>
<span class="n">photo_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="n">upload_dir</span><span class="p">)</span> <span class="o">/</span> <span class="s">"photos"</span> <span class="o">/</span> <span class="n">filename</span>
<span class="n">photo_path</span><span class="p">.</span><span class="n">parent</span><span class="p">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">parents</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">photo_path</span><span class="p">,</span> <span class="s">"wb"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>After:</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">services.storage</span> <span class="kn">import</span> <span class="n">get_storage</span>
<span class="n">storage</span> <span class="o">=</span> <span class="n">get_storage</span><span class="p">()</span>
<span class="n">storage</span><span class="p">.</span><span class="n">ensure_directories</span><span class="p">(</span><span class="s">"photos"</span><span class="p">)</span>
<span class="n">photo_url</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">save_file</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="sa">f</span><span class="s">"photos/</span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="s">"image/jpeg"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="from-environment-variables"><strong>From Environment Variables</strong></h3>
<p><strong>Before:</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">upload_dir</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">"UPLOAD_DIR"</span><span class="p">,</span> <span class="s">"static/uploads"</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>After:</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">services.storage</span> <span class="kn">import</span> <span class="n">get_storage</span>
<span class="n">storage</span> <span class="o">=</span> <span class="n">get_storage</span><span class="p">()</span>  <span class="c1"># Automatically configured based on environment
</span></code></pre></div></div>

<h2 id="-testing">🧪 Testing</h2>

<h3 id="storage-system-tests"><strong>Storage System Tests</strong></h3>
<ul>
  <li>✅ Filesystem storage functionality</li>
  <li>✅ S3 storage configuration (without actual S3 access)</li>
  <li>✅ Environment detection and backend selection</li>
  <li>✅ Import path validation</li>
  <li>✅ Demo assets integration</li>
</ul>

<h3 id="demo-workflow-tests"><strong>Demo Workflow Tests</strong></h3>
<ul>
  <li>✅ Save functionality includes storage system</li>
  <li>✅ Restore functionality restores storage system</li>
  <li>✅ Destroy functionality removes storage system</li>
  <li>✅ Diff functionality compares storage system</li>
  <li>✅ No differences found after save/restore cycle</li>
</ul>

<h2 id="-documentation">📚 Documentation</h2>

<h3 id="comprehensive-readme"><strong>Comprehensive README</strong></h3>
<ul>
  <li><strong>Quick Start Guide</strong>: Development and production setup</li>
  <li><strong>Environment Variables</strong>: Complete configuration reference</li>
  <li><strong>Usage Examples</strong>: Basic and advanced usage patterns</li>
  <li><strong>Migration Guide</strong>: Step-by-step migration instructions</li>
  <li><strong>Configuration Examples</strong>: Development, LeapCell, and AWS S3 setups</li>
  <li><strong>Error Handling</strong>: Consistent error handling across backends</li>
</ul>

<h3 id="code-documentation"><strong>Code Documentation</strong></h3>
<ul>
  <li><strong>Type Hints</strong>: Full type annotations for all methods</li>
  <li><strong>Docstrings</strong>: Comprehensive documentation for all classes and methods</li>
  <li><strong>Examples</strong>: Usage examples in docstrings</li>
  <li><strong>Error Handling</strong>: Clear error messages and exception handling</li>
</ul>

<h2 id="-benefits">🎯 Benefits</h2>

<h3 id="for-development"><strong>For Development</strong></h3>
<ul>
  <li><strong>Zero Configuration</strong>: Works out of the box with filesystem storage</li>
  <li><strong>Easy Testing</strong>: Simple to mock and test</li>
  <li><strong>Clear Separation</strong>: Storage logic separated from business logic</li>
  <li><strong>Type Safety</strong>: Full type hints and validation</li>
</ul>

<h3 id="for-production"><strong>For Production</strong></h3>
<ul>
  <li><strong>Cloud-Ready</strong>: Seamless S3 integration for cloud deployments</li>
  <li><strong>CDN Support</strong>: Built-in CDN URL generation</li>
  <li><strong>Scalable</strong>: Object storage scales with application needs</li>
  <li><strong>Persistent</strong>: Files persist across deployments</li>
</ul>

<h3 id="for-deployment"><strong>For Deployment</strong></h3>
<ul>
  <li><strong>Environment-Based</strong>: Automatic backend selection</li>
  <li><strong>LeapCell Compatible</strong>: Works with LeapCell Object Storage</li>
  <li><strong>AWS Compatible</strong>: Works with AWS S3</li>
  <li><strong>Flexible</strong>: Easy to add new storage backends</li>
</ul>

<h2 id="-demo-assets-integration">🔄 Demo Assets Integration</h2>

<h3 id="save-workflow"><strong>Save Workflow</strong></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv run python oppdemo.py save
<span class="c"># → Saves services/storage/ to demo_assets/services/storage/</span>
</code></pre></div></div>

<h3 id="restore-workflow"><strong>Restore Workflow</strong></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv run python oppdemo.py restore
<span class="c"># → Restores services/storage/ from demo_assets/services/storage/</span>
</code></pre></div></div>

<h3 id="destroy-workflow"><strong>Destroy Workflow</strong></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv run python oppdemo.py destroy
<span class="c"># → Removes services/ directory (including storage/)</span>
</code></pre></div></div>

<h3 id="diff-workflow"><strong>Diff Workflow</strong></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv run python oppdemo.py diff
<span class="c"># → Shows differences in services/storage/ module</span>
</code></pre></div></div>

<h2 id="-usage-examples">🚀 Usage Examples</h2>

<h3 id="basic-usage"><strong>Basic Usage</strong></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">services.storage</span> <span class="kn">import</span> <span class="n">get_storage</span>

<span class="c1"># Get configured storage instance
</span><span class="n">storage</span> <span class="o">=</span> <span class="n">get_storage</span><span class="p">()</span>

<span class="c1"># Ensure directories exist
</span><span class="n">storage</span><span class="p">.</span><span class="n">ensure_directories</span><span class="p">(</span><span class="s">"photos"</span><span class="p">,</span> <span class="s">"sample_photos"</span><span class="p">)</span>

<span class="c1"># Save a file
</span><span class="n">photo_url</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">save_file</span><span class="p">(</span>
    <span class="n">content</span><span class="o">=</span><span class="n">image_bytes</span><span class="p">,</span>
    <span class="n">path</span><span class="o">=</span><span class="s">"photos/avatar.jpg"</span><span class="p">,</span>
    <span class="n">content_type</span><span class="o">=</span><span class="s">"image/jpeg"</span>
<span class="p">)</span>

<span class="c1"># Check if file exists
</span><span class="k">if</span> <span class="n">storage</span><span class="p">.</span><span class="n">file_exists</span><span class="p">(</span><span class="s">"photos/avatar.jpg"</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"File exists!"</span><span class="p">)</span>

<span class="c1"># Get file content
</span><span class="n">image_data</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">get_file</span><span class="p">(</span><span class="s">"photos/avatar.jpg"</span><span class="p">)</span>

<span class="c1"># Get public URL
</span><span class="n">public_url</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">get_file_url</span><span class="p">(</span><span class="s">"photos/avatar.jpg"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="advanced-usage"><strong>Advanced Usage</strong></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">services.storage</span> <span class="kn">import</span> <span class="n">get_storage</span>

<span class="n">storage</span> <span class="o">=</span> <span class="n">get_storage</span><span class="p">()</span>

<span class="c1"># List files with prefix
</span><span class="n">photos</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">list_files</span><span class="p">(</span><span class="s">"photos/"</span><span class="p">)</span>

<span class="c1"># Delete a file
</span><span class="n">success</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">delete_file</span><span class="p">(</span><span class="s">"photos/old_avatar.jpg"</span><span class="p">)</span>

<span class="c1"># Check storage type
</span><span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">storage</span><span class="p">,</span> <span class="n">FilesystemStorage</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Using local filesystem"</span><span class="p">)</span>
<span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">storage</span><span class="p">,</span> <span class="n">S3Storage</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Using S3 object storage"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="-quality-assurance">✅ Quality Assurance</h2>

<h3 id="code-quality"><strong>Code Quality</strong></h3>
<ul>
  <li><strong>Linting</strong>: All code passes linting checks</li>
  <li><strong>Type Safety</strong>: Full type hints throughout</li>
  <li><strong>Error Handling</strong>: Comprehensive error handling</li>
  <li><strong>Documentation</strong>: Complete docstrings and comments</li>
</ul>

<h3 id="testing"><strong>Testing</strong></h3>
<ul>
  <li><strong>Unit Tests</strong>: Storage system functionality tested</li>
  <li><strong>Integration Tests</strong>: Demo workflow integration tested</li>
  <li><strong>Environment Tests</strong>: Multiple environment configurations tested</li>
  <li><strong>Error Tests</strong>: Error conditions and edge cases tested</li>
</ul>

<h3 id="documentation"><strong>Documentation</strong></h3>
<ul>
  <li><strong>README</strong>: Comprehensive documentation with examples</li>
  <li><strong>Code Comments</strong>: Clear comments explaining complex logic</li>
  <li><strong>Type Hints</strong>: Full type annotations for IDE support</li>
  <li><strong>Examples</strong>: Practical usage examples throughout</li>
</ul>

<h2 id="-summary">🎉 Summary</h2>

<ol>
  <li><strong>Clean Architecture</strong>: Abstract interface with concrete implementations</li>
  <li><strong>Environment Flexibility</strong>: Automatic backend selection based on configuration</li>
  <li><strong>Production Ready</strong>: Full S3 support for cloud deployments</li>
  <li><strong>Development Friendly</strong>: Zero-configuration filesystem storage</li>
  <li><strong>Demo Integration</strong>: Seamless integration with demo assets workflow</li>
  <li><strong>Comprehensive Documentation</strong>: Complete usage and configuration guide</li>
</ol>

<p>The storage system is now a first-class citizen in the application, providing a clean abstraction for file operations while maintaining backward compatibility and adding powerful new capabilities for production deployments.</p>]]></content><author><name>Craig Oda</name></author><summary type="html"><![CDATA[Moved image upload storage from only files to include S3]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://oppkey.github.io/fastopp/assets/images/2025_10/run.jpg" /><media:content medium="image" url="https://oppkey.github.io/fastopp/assets/images/2025_10/run.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">UC Berkeley Student’s Process for Testing and Contributing to FastOpp</title><link href="https://oppkey.github.io/fastopp/2025/10/08/testing-fastopp/" rel="alternate" type="text/html" title="UC Berkeley Student’s Process for Testing and Contributing to FastOpp" /><published>2025-10-08T00:00:00+00:00</published><updated>2025-10-08T00:00:00+00:00</updated><id>https://oppkey.github.io/fastopp/2025/10/08/testing-fastopp</id><content type="html" xml:base="https://oppkey.github.io/fastopp/2025/10/08/testing-fastopp/"><![CDATA[<p>I recently had the opportunity to try FastOpp’s AI Chat assistant
and decided to test it using different procedures.</p>

<h2 id="first-impressions-putting-a-new-llm-to-the-test">First Impressions: Putting a New LLM to the Test</h2>

<p>My goal was to test its performance across a variety of tasks, from its raw speed and accuracy to its conversational memory. Here’s a look at how it performed.</p>

<h2 id="speed-and-versatility-the-bright-spots">Speed and Versatility: The Bright Spots</h2>

<p>Right away, I was impressed by the LLM’s results. It handled a diverse set of prompts, tackling controversial topics, generating specific coding examples, and even constructing travel plans around a given timeframe and location of interest. The speed was great, too. Most responses were generated in a quick 3 to 5 seconds.</p>

<p>The model also proved its accuracy in specific tasks. I tested its summarization ability with a short, four-sentence paragraph about the sun and asked it to condense it into a single sentence. It passed perfectly, creating one concise sentence that captured all the necessary information without losing accuracy.</p>

<h2 id="challenges-with-conversation-history-and-response-accuracy">Challenges with Conversation History and Response Accuracy</h2>

<p>While I enjoyed tinkering with the LLM, a prototype wouldn’t be a prototype without things it can improve on.</p>

<p>First, I noticed that response times weren’t always consistent. Some simple prompts took longer than expected (6-10 seconds), while, interestingly, some complex requests (e.g., debugging a recursive function) took around the same time a simple prompt would.</p>

<p>Second, during longer sessions, particularly after about 30 prompts, the model would sometimes run into errors and temporarily refuse to accept a new prompt. However, to my surprise, after a short 5-to-10-second wait, the LLM would again accept prompts as if nothing had happened.</p>

<p>I also dug into its conversational memory (or at least I attempted to). My procedure was simple. First, I fed the LLM a simple fact: I told the LLM that my cat’s name is Kathy. Afterward, I would ask the LLM to write some simple code for minor tasks such as writing a sentence or printing a range of numbers.</p>

<p>My tests showed it could reliably remember the context of a conversation for up to 8 messages, but it struggled beyond that. Later, I tried again with more complex prompts. It could not remember the simple fact after 10, 20, or 30 messages, regardless of prompt complexity. This was even though I manually changed the message history limit through Visual Studio Code on my local machine.</p>

<h2 id="final-thoughts">Final Thoughts</h2>

<p>Overall, my experience with the AI Chat Assistant was very promising. It demonstrates a powerful and fast core capability while able to handle tasks with impressive detail. The occasional errors are expected of a prototype. Personally, they were no hindrance in assisting me with my daily activities. The foundation is clearly solid, and I’m excited to see how this LLM can help users accomplish more in a quick and cost-efficient manner.</p>]]></content><author><name>Ethan Luke Kim</name></author><summary type="html"><![CDATA[Notes on testing the FastOpp framework, including the essential git commands for contributing.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://oppkey.github.io/fastopp/assets/images/2025_10/blog-testing.webp" /><media:content medium="image" url="https://oppkey.github.io/fastopp/assets/images/2025_10/blog-testing.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Architectural Consistency When Working with a PostgreSQL Async Database</title><link href="https://oppkey.github.io/fastopp/2025/10/07/postgresql-async/" rel="alternate" type="text/html" title="Architectural Consistency When Working with a PostgreSQL Async Database" /><published>2025-10-07T00:00:00+00:00</published><updated>2025-10-07T00:00:00+00:00</updated><id>https://oppkey.github.io/fastopp/2025/10/07/postgresql-async</id><content type="html" xml:base="https://oppkey.github.io/fastopp/2025/10/07/postgresql-async/"><![CDATA[<h2 id="postgresql-failing-with-async-in-production-although-sqlite-works-on-my-mac">PostgreSQL Failing with Async in Production Although SQLite Works on my Mac</h2>

<p>Last week, I was working on our FastOpp project and ran into a classic developer problem: “It works on my machine, but not in production.” Specifically, our FastAPI application worked perfectly with SQLite during development, but when I tried to switch to PostgreSQL in production on Leapcell using the Leapcell PostgreSQL service,
database access broke.</p>

<h2 id="converting-database-connection-to-sync-led-to-more-problems">Converting Database Connection to Sync Led to More Problems</h2>

<p>My first instinct was the same as many developers: find a workaround. I discovered that our
migration tool (Alembic) was trying to use synchronous database operations while our
FastAPI app was using asynchronous ones.</p>

<p>The “solution” I found online was to convert the database URL from async to sync during migrations:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># The "quick fix" approach - BEFORE
</span><span class="k">def</span> <span class="nf">run_migrations_online</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">database_url</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">"DATABASE_URL"</span><span class="p">,</span> <span class="n">config</span><span class="p">.</span><span class="n">get_main_option</span><span class="p">(</span><span class="s">"sqlalchemy.url"</span><span class="p">))</span>
    
    <span class="c1"># Convert async URLs to regular URLs for migrations
</span>    <span class="k">if</span> <span class="n">database_url</span> <span class="ow">and</span> <span class="s">"aiosqlite"</span> <span class="ow">in</span> <span class="n">database_url</span><span class="p">:</span>
        <span class="n">database_url</span> <span class="o">=</span> <span class="n">database_url</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"sqlite+aiosqlite://"</span><span class="p">,</span> <span class="s">"sqlite://"</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">database_url</span> <span class="ow">and</span> <span class="s">"asyncpg"</span> <span class="ow">in</span> <span class="n">database_url</span><span class="p">:</span>
        <span class="n">database_url</span> <span class="o">=</span> <span class="n">database_url</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"postgresql+asyncpg://"</span><span class="p">,</span> <span class="s">"postgresql://"</span><span class="p">)</span>
    
    <span class="n">connectable</span> <span class="o">=</span> <span class="n">engine_from_config</span><span class="p">(...)</span>  <span class="c1"># SYNC engine
</span>    <span class="k">with</span> <span class="n">connectable</span><span class="p">.</span><span class="n">connect</span><span class="p">()</span> <span class="k">as</span> <span class="n">connection</span><span class="p">:</span>  <span class="c1"># SYNC connection
</span>        <span class="n">context</span><span class="p">.</span><span class="n">configure</span><span class="p">(</span><span class="n">connection</span><span class="o">=</span><span class="n">connection</span><span class="p">,</span> <span class="p">...)</span>
</code></pre></div></div>

<p>I committed the solution after only testing it on SQLite locally and unfortunately forgot
to test it on PostgreSQL.  Several months passed and my laziness came back to bite
me and cost me many hours. As I am new to Alembic, I didn’t think about
async Alembic patterns. The logic of using synchronous calls for migrations seemed fine
to me as migrations <em>felt</em> synchronous.  I didn’t think about this mismatch in architectures
too deeply, shrugging it off as “the way things are.”</p>

<h2 id="the-real-problem-architectural-mismatch">The Real Problem: Architectural Mismatch</h2>

<p>Here’s what I learned: when you build an async application, try to keep as much of your code
as possible async. Although it is possible to “convert” async to sync in the middle of your stack,
it may cause problems in the future when you have to maintain your own code.</p>

<p>The issue wasn’t with the database or the migration tool. The issue was that I was trying to mix two different paradigms:</p>

<ul>
  <li><strong>My FastAPI app</strong>: Async throughout (using <code class="language-plaintext highlighter-rouge">asyncpg</code> for PostgreSQL)</li>
  <li><strong>My migrations</strong>: Sync operations (using sync database drivers)</li>
</ul>

<h2 id="the-right-solution-go-all-in-on-async">The Right Solution: Go All-In on Async</h2>

<p>Instead of trying to convert between async and sync, I updated our migration system to be async from the ground up. Here’s the transformation:</p>

<h2 id="the-solution-pure-async-approach">The Solution: Pure Async Approach</h2>

<p>The key was updating <code class="language-plaintext highlighter-rouge">alembic/env.py</code> to use async patterns throughout:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># The RIGHT approach - AFTER
</span><span class="kn">import</span> <span class="nn">asyncio</span>
<span class="kn">from</span> <span class="nn">sqlalchemy.ext.asyncio</span> <span class="kn">import</span> <span class="n">async_engine_from_config</span>
<span class="kn">from</span> <span class="nn">sqlalchemy.engine</span> <span class="kn">import</span> <span class="n">Connection</span>

<span class="k">def</span> <span class="nf">do_run_migrations</span><span class="p">(</span><span class="n">connection</span><span class="p">:</span> <span class="n">Connection</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">context</span><span class="p">.</span><span class="n">configure</span><span class="p">(</span><span class="n">connection</span><span class="o">=</span><span class="n">connection</span><span class="p">,</span> <span class="n">target_metadata</span><span class="o">=</span><span class="n">target_metadata</span><span class="p">)</span>
    <span class="k">with</span> <span class="n">context</span><span class="p">.</span><span class="n">begin_transaction</span><span class="p">():</span>
        <span class="n">context</span><span class="p">.</span><span class="n">run_migrations</span><span class="p">()</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_async_migrations</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">connectable</span> <span class="o">=</span> <span class="n">async_engine_from_config</span><span class="p">(...)</span>  <span class="c1"># ASYNC engine
</span>    <span class="k">async</span> <span class="k">with</span> <span class="n">connectable</span><span class="p">.</span><span class="n">connect</span><span class="p">()</span> <span class="k">as</span> <span class="n">connection</span><span class="p">:</span>  <span class="c1"># ASYNC connection
</span>        <span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="n">run_sync</span><span class="p">(</span><span class="n">do_run_migrations</span><span class="p">)</span>  <span class="c1"># Magic happens here!
</span>    <span class="k">await</span> <span class="n">connectable</span><span class="p">.</span><span class="n">dispose</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">run_migrations_online</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">asyncio</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">run_async_migrations</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="technical-implementation-details">Technical Implementation Details</h3>

<ul>
  <li><strong>Added async imports</strong>: <code class="language-plaintext highlighter-rouge">asyncio</code>, <code class="language-plaintext highlighter-rouge">Connection</code>, <code class="language-plaintext highlighter-rouge">async_engine_from_config</code></li>
  <li><strong>Replaced sync patterns</strong> with async alembic template approach</li>
  <li><strong>Added <code class="language-plaintext highlighter-rouge">do_run_migrations()</code></strong> function for connection handling</li>
  <li><strong>Added <code class="language-plaintext highlighter-rouge">run_async_migrations()</code></strong> function for async engine management</li>
  <li><strong>Updated <code class="language-plaintext highlighter-rouge">run_migrations_online()</code></strong> to use <code class="language-plaintext highlighter-rouge">asyncio.run()</code></li>
</ul>

<p>The key insight was this line:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="n">run_sync</span><span class="p">(</span><span class="n">do_run_migrations</span><span class="p">)</span>
</code></pre></div></div>

<p>This allows you to run synchronous migration code within an async database connection.</p>

<h2 id="the-results-what-actually-happened">The Results: What Actually Happened</h2>

<p>After implementing the async approach, here’s what we achieved:</p>

<h3 id="single-driver-architecture"><strong>Single Driver Architecture</strong></h3>

<ul>
  <li><strong>Before</strong>: Needed both <code class="language-plaintext highlighter-rouge">asyncpg</code> (app) + <code class="language-plaintext highlighter-rouge">psycopg2</code> (migrations)</li>
  <li><strong>After</strong>: Only <code class="language-plaintext highlighter-rouge">asyncpg</code> for everything - no driver conflicts</li>
</ul>

<h3 id="consistent-database-urls"><strong>Consistent Database URLs</strong></h3>

<ul>
  <li><strong>Before</strong>: App used <code class="language-plaintext highlighter-rouge">postgresql+asyncpg://</code> but migrations converted to <code class="language-plaintext highlighter-rouge">postgresql://</code></li>
  <li><strong>After</strong>: Both use <code class="language-plaintext highlighter-rouge">postgresql+asyncpg://</code> - same driver throughout</li>
</ul>

<h3 id="works-with-both-databases"><strong>Works with Both Databases</strong></h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># SQLite (development)</span>
<span class="nb">export </span><span class="nv">DATABASE_URL</span><span class="o">=</span><span class="s2">"sqlite+aiosqlite:///./test.db"</span>
uv run python oppman.py migrate upgrade  <span class="c"># ✅ Works</span>
uv run python oppman.py runserver  <span class="c"># ✅ Works</span>

<span class="c"># PostgreSQL (production)  </span>
<span class="nb">export </span><span class="nv">DATABASE_URL</span><span class="o">=</span><span class="s2">"postgresql+asyncpg://user@localhost:5432/fastopp"</span>
uv run python oppman.py migrate upgrade  <span class="c"># ✅ Works</span>
uv run python oppman.py runserver  <span class="c"># ✅ Works</span>
</code></pre></div></div>

<h3 id="database-verification-results"><strong>Database Verification Results</strong></h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># PostgreSQL tables created successfully</span>
psql <span class="nt">-d</span> fastopp_test <span class="nt">-c</span> <span class="s2">"</span><span class="se">\d</span><span class="s2">t"</span>
<span class="c"># Result: users, products, webinar_registrants, audit_logs, alembic_version</span>

<span class="c"># Health check verification</span>
curl <span class="nt">-s</span> http://localhost:8000/health
<span class="c"># Result: {"status":"healthy","message":"FastOpp Demo app is running"}</span>
</code></pre></div></div>

<h2 id="benefits-of-the-async-approach">Benefits of the Async Approach</h2>

<h3 id="performance-benefits">Performance Benefits</h3>

<ul>
  <li><strong>Async operations</strong> throughout the application</li>
  <li><strong>No sync/async context switching</strong> overhead</li>
  <li><strong>Better concurrency</strong> for database operations</li>
</ul>

<h3 id="developer-experience">Developer Experience</h3>

<ul>
  <li><strong>Single driver approach</strong> - no psycopg2 conflicts</li>
  <li><strong>Environment-based switching</strong> between SQLite and PostgreSQL</li>
  <li><strong>Modern async patterns</strong> following SQLAlchemy 2.0 best practices</li>
</ul>

<h3 id="production-ready">Production Ready</h3>

<ul>
  <li><strong>PostgreSQL support</strong> for production deployments</li>
  <li><strong>Async alembic migrations</strong> work with both databases</li>
  <li><strong>No breaking changes</strong> to existing SQLite development workflow</li>
</ul>

<h2 id="why-this-matters-for-students">Why This Matters for Students</h2>

<p>If you’re learning web development, here’s the takeaway: <strong>consistency is more important than clever workarounds</strong>.</p>

<p>When you’re building modern web applications:</p>

<ul>
  <li>Choose your architecture (sync or async) and stick with it</li>
  <li>Don’t try to mix paradigms just because it seems easier</li>
  <li>The “quick fix” often becomes the “long-term problem”</li>
</ul>

<h2 id="async-database-access-may-not-be-justified">Async Database Access May Not Be Justified</h2>

<p>Standardizing on synchronous database access for everything is simpler and will
work for most apps.  Asynchronous operations are needed only for heavy
SQL joins where the response takes many seconds or minutes and need to be run
in real-time.  In most cases, people will run the operation in the background
with Celery.</p>

<p>However, even if I don’t see the need for asynchronous database connections,
other people might.  FastOpp is a learning tool and I want to provide
asynchronous connectivity to support the creativity of others.</p>

<h2 id="the-business-lesson">The Business Lesson</h2>

<p>As a manager, I’ve seen this pattern play out in many projects. The “quick fix”
that saves 30 minutes today often costs hours or days later. In this case, spending the extra time to properly implement async migrations saved us from a maintenance nightmare. The “quick fix”
was also forgotten because there is no real-world impact in using synchronous migrations.</p>

<p>The modern approach - using async patterns throughout - is not just technically correct, it’s also more maintainable and scalable.</p>

<h2 id="whats-next">What’s Next</h2>

<p>Our FastOpp project now supports both SQLite (for development) and PostgreSQL (for production) with a single, consistent async architecture. No more driver conflicts, no more sync/async mixing, and no more “it works on my machine” problems.</p>

<p>It appears that <a href="https://www.psycopg.org/psycopg3/">psycopg3</a> supports both async and sync. I don’t think it’s as popular
as asyncpg.  However, I hope to try it out next.</p>

<h2 id="migration-guide-for-existing-users">Migration Guide for Existing Users</h2>

<h3 id="no-action-required"><strong>No Action Required</strong></h3>

<ul>
  <li><strong>SQLite development</strong> continues to work exactly as before</li>
  <li><strong>Optional</strong>: Update <code class="language-plaintext highlighter-rouge">.env</code> to use <code class="language-plaintext highlighter-rouge">sqlite+aiosqlite://</code> for consistency</li>
  <li><strong>For PostgreSQL testing</strong>: Set <code class="language-plaintext highlighter-rouge">DATABASE_URL=postgresql+asyncpg://...</code></li>
</ul>

<h3 id="for-new-deployments"><strong>For New Deployments</strong></h3>

<ol>
  <li><strong>Development</strong>: Use <code class="language-plaintext highlighter-rouge">DATABASE_URL=sqlite+aiosqlite:///./test.db</code></li>
  <li><strong>Production</strong>: Use <code class="language-plaintext highlighter-rouge">DATABASE_URL=postgresql+asyncpg://user:pass@host:port/db</code></li>
  <li><strong>Run migrations</strong>: <code class="language-plaintext highlighter-rouge">uv run python oppman.py migrate upgrade</code></li>
</ol>

<h2 id="files-changed">Files Changed</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">alembic/env.py</code> - Updated to async patterns</li>
  <li><code class="language-plaintext highlighter-rouge">example.env</code> - Added PostgreSQL configuration examples</li>
  <li><code class="language-plaintext highlighter-rouge">docs/deployment/POSTGRESQL_SETUP.md</code> - Updated installation instructions</li>
  <li><code class="language-plaintext highlighter-rouge">docs/DATABASE.md</code> - Updated troubleshooting with async patterns</li>
</ul>

<h2 id="breaking-changes">Breaking Changes</h2>

<p><strong>None</strong> - This is a backward-compatible enhancement that adds PostgreSQL support while maintaining full SQLite compatibility.</p>

<h2 id="additional-information">Additional Information</h2>

<p><a href="https://github.com/Oppkey/fastopp/pull/140">Pull request with extensive description of changes</a>.</p>]]></content><author><name>Craig Oda</name></author><summary type="html"><![CDATA[How I learned that async databases need async migrations, and why the 'quick fix' approach doesn't scale]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://oppkey.github.io/fastopp/assets/images/2025_10/run.jpg" /><media:content medium="image" url="https://oppkey.github.io/fastopp/assets/images/2025_10/run.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Using Tavily to add internet search to chat</title><link href="https://oppkey.github.io/fastopp/2025/09/30/adding-internet-search-to-llm/" rel="alternate" type="text/html" title="Using Tavily to add internet search to chat" /><published>2025-09-30T00:00:00+00:00</published><updated>2025-09-30T00:00:00+00:00</updated><id>https://oppkey.github.io/fastopp/2025/09/30/adding-internet-search-to-llm</id><content type="html" xml:base="https://oppkey.github.io/fastopp/2025/09/30/adding-internet-search-to-llm/"><![CDATA[<h3 id="httpsgithubcomcodetricitychat-with-history"><a href="https://github.com/codetricity/chat-with-history">https://github.com/codetricity/chat-with-history</a></h3>]]></content><author><name>Shotoku</name></author><summary type="html"><![CDATA[This chat_with_history example has an a way to connect LLM to internet search]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://oppkey.github.io/fastopp/assets/images/search-icon.png" /><media:content medium="image" url="https://oppkey.github.io/fastopp/assets/images/search-icon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">FastOpp Deployment to Leapcell - Free Hosting Tier</title><link href="https://oppkey.github.io/fastopp/2025/09/30/leapcell-deployment/" rel="alternate" type="text/html" title="FastOpp Deployment to Leapcell - Free Hosting Tier" /><published>2025-09-30T00:00:00+00:00</published><updated>2025-09-30T00:00:00+00:00</updated><id>https://oppkey.github.io/fastopp/2025/09/30/leapcell-deployment</id><content type="html" xml:base="https://oppkey.github.io/fastopp/2025/09/30/leapcell-deployment/"><![CDATA[<p>These tutorials will take you through free deployment on
Leapcell with both FastAPI and FastOpp.</p>

<p><a href="https://youtu.be/xhOALd640tA">FastAPI Deploy to Leapcell - free hosting tier</a></p>

<p><a href="https://youtu.be/GoKpQTHE-1A">Free  Deploy to Leapcell with FastAPI, PostgreSQL and Object Storage</a></p>]]></content><author><name>Oppkey Tutor</name></author><summary type="html"><![CDATA[Free deployment to Leapcell. No credit card required.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://oppkey.github.io/fastopp/assets/images/leapcell_logo.png" /><media:content medium="image" url="https://oppkey.github.io/fastopp/assets/images/leapcell_logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Welcome to FastOpp - Easier AI Web Apps for Students</title><link href="https://oppkey.github.io/fastopp/2025/09/29/welcome-to-fastopp/" rel="alternate" type="text/html" title="Welcome to FastOpp - Easier AI Web Apps for Students" /><published>2025-09-29T00:00:00+00:00</published><updated>2025-09-29T00:00:00+00:00</updated><id>https://oppkey.github.io/fastopp/2025/09/29/welcome-to-fastopp</id><content type="html" xml:base="https://oppkey.github.io/fastopp/2025/09/29/welcome-to-fastopp/"><![CDATA[<p>Welcome to the FastOpp blog. <strong>FastOpp</strong> is a FastAPI starter package designed specifically for students prototyping AI web applications.</p>

<h2 id="what-is-fastopp">What is FastOpp?</h2>

<p>FastOpp provides pre-built admin components that give FastAPI functionality comparable to Django for AI-first applications. It’s designed to bridge the gap between Django’s ease of use and FastAPI’s modern async capabilities.</p>

<h3 id="the-problem-were-solving">The Problem We’re Solving</h3>

<p>Django and Flask are not designed for optimized async LLM applications. While both can absolutely be used for complex AI applications, there are often rough patches during development of asynchronous AI applications that communicate with backend LLMs available at OpenAI, Anthropic, and OpenRouter.</p>

<p>FastAPI has advantages in future-proof architecture, but can have a steep learning curve for people, especially for developers familiar with Django. FastOpp bridges this gap by providing an opinionated framework for FastAPI with Django-inspired features.</p>

<h2 id="key-features">Key Features</h2>

<h3 id="️-admin-panel">🛡️ Admin Panel</h3>
<p>Django-style admin panel with role-based authentication, similar to Django admin but built for FastAPI.</p>

<h3 id="️-sql-database">🗄️ SQL Database</h3>
<p>SQL database with Django-inspired models and migrations using SQLModel and Alembic.</p>

<h3 id="-modern-ui">🎨 Modern UI</h3>
<p>Tailwind CSS, DaisyUI, Alpine.js, and HTMX for beautiful, interactive interfaces.</p>

<h3 id="-api-endpoints">🔌 API Endpoints</h3>
<p>Auto-generated API documentation and endpoints designed to connect with React and Flutter.</p>

<h3 id="-fast-development">⚡ Fast Development</h3>
<p>Get started quickly with pre-built components and management tools like <code class="language-plaintext highlighter-rouge">oppman.py</code> and <code class="language-plaintext highlighter-rouge">oppdemo.py</code>.</p>

<h2 id="who-is-fastopp-for">Who is FastOpp For?</h2>

<p>FastOpp is opinionated and may not be for everyone. It’s intended for:</p>

<ul>
  <li><strong>University students</strong> looking to build resume projects</li>
  <li><strong>Hobbyists</strong> wanting to vibe code simple AI utilities</li>
  <li><strong>Small business entrepreneurs</strong> with great ideas but limited programming experience</li>
</ul>

<h3 id="important-note">Important Note</h3>
<p>FastOpp is <strong>not intended for production use or for experienced developers</strong>. It’s a learning tool designed to get you started quickly with AI applications.</p>

<h2 id="quick-start">Quick Start</h2>

<p>Getting started with FastOpp is simple:</p>

<ol>
  <li><strong>Create your repo from the template</strong>
    <ul>
      <li>Go to <a href="https://github.com/Oppkey/FastOpp">FastOpp on GitHub</a></li>
      <li>Click “Use this template” → “Create a new repository”</li>
      <li>Name it (e.g., <code class="language-plaintext highlighter-rouge">fastopp-&lt;yourproject&gt;</code>)</li>
    </ul>
  </li>
  <li><strong>Clone and setup</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/&lt;YOUR_USERNAME&gt;/fastopp-&lt;yourproject&gt;.git
<span class="nb">cd </span>fastopp-&lt;yourproject&gt;
uv <span class="nb">sync</span>
</code></pre></div>    </div>
  </li>
  <li><strong>One-command setup</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv run python oppdemo.py init
</code></pre></div>    </div>
  </li>
  <li><strong>Start developing</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv run python oppman.py runserver
</code></pre></div>    </div>
  </li>
</ol>

<p>Visit <code class="language-plaintext highlighter-rouge">http://localhost:8000/</code> to see your FastOpp application in action!</p>

<h2 id="whats-next">What’s Next?</h2>

<p>In upcoming posts, I’ll cover:</p>

<ul>
  <li>Setting up your first AI chat application</li>
  <li>Customizing the admin panel</li>
  <li>Deploying to production</li>
  <li>Advanced FastAPI patterns with FastOpp</li>
</ul>

<h2 id="get-involved">Get Involved</h2>

<ul>
  <li><strong>GitHub</strong>: <a href="https://github.com/Oppkey/FastOpp">Oppkey/FastOpp</a></li>
  <li><strong>Issues</strong>: Report bugs or request features</li>
  <li><strong>Discussions</strong>: Ask questions and share your projects</li>
</ul>

<p>FastOpp is designed to be beautiful, cheap, easy, and opinionated. Whether you’re a student building your first AI app or a hobbyist exploring new possibilities, FastOpp provides the foundation you need to get started quickly.</p>

<p>Stay tuned for more tutorials, tips, and updates about FastOpp development!</p>

<hr />

<p><em>Have questions about FastOpp? Check out our <a href="https://github.com/Oppkey/FastOpp">GitHub repository</a> or start a discussion. We’d love to hear about your AI application ideas!</em></p>]]></content><author><name>Craig Oda</name></author><summary type="html"><![CDATA[Introducing FastOpp, a FastAPI starter package designed for students prototyping AI web applications. Get Django-like functionality with FastAPI's async capabilities.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://oppkey.github.io/fastopp/assets/images/workshop.webp" /><media:content medium="image" url="https://oppkey.github.io/fastopp/assets/images/workshop.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>